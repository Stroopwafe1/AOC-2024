ui8[20000] s_buffer;
i64 s_height = 0;
i64 s_width = 0;

ui64 s_start_x = 0;
ui64 s_start_y = 0;

ui64[10000] s_visited_x;
ui64[10000] s_visited_y;
ui64 s_visited_count = 0;

ui32 Hash(ui16 a, ui16 b) {
	return (a << 16) + b;
}

ref<ui8> Setup(ui64 size) {
	ui64 y = 0;
	ref<ui8> hashBuffer = alloc(2147483647);
	loop i, 0..size {
		ui8 byte = s_buffer[i];
		if byte == '\n' {
			y += 1;
			s_height += 1;
			if s_width == 0 {
				s_width = i;
			}
		} else if byte == '#' {
			ui16 x = i;
			if s_width != 0 {
				x = (i % (s_width + 1));
			}
			ui32 index = Hash(x, y);
			hashBuffer[index] = 1;
		} else if byte == '^' {
			s_start_x = (i % (s_width + 1));
			s_start_y = y;
		}
	}
	return hashBuffer;
}

void Part1(ref<ui8> hashBuffer) {
	i64 x = s_start_x;
	i64 y = s_start_y;
	i8 x_dir = 0;
	i8 y_dir = -1;
	s_visited_x[s_visited_count] = x;
	s_visited_y[s_visited_count] = y;
	s_visited_count += 1;
	loop {
		i64 x_next = x + x_dir;
		i64 y_next = y + y_dir;
		bool turned = false;
		if (x_next < 0) | (x_next >= s_width) {
			stdout.write("Player escaped x\n");
			break;
		} else if (y_next < 0) | (y_next >= s_height) {
			stdout.write("Player escaped y\n");
			break;
		}
		ui32 hash = Hash(x_next, y_next);
		ui8 hasPos = hashBuffer[hash];
		if hasPos == 1 {
			if y_dir == -1 {
				y_dir = 0;
				x_dir = 1;
			} else if x_dir == 1 {
				x_dir = 0;
				y_dir = 1;
			} else if y_dir = 1 {
				y_dir = 0;
				x_dir = -1;
			} else {
				x_dir = 0;
				y_dir = -1;
			}
			turned = true;
			stdout.write("Turned at ");
			stdout.write(x);
			stdout.write(", ");
			stdout.writeln(y);
		}
		if turned {
			skip;
		}
		x = x_next;
		y = y_next;
		bool alreadyAdded = false;
		loop i, 0..s_visited_count {
			ui64 x_check = s_visited_x[i];
			ui64 y_check = s_visited_y[i];
			if (x_check == x) & (y_check == y) {
				alreadyAdded = true;
				break;
			}
		}
		if !alreadyAdded {
			s_visited_x[s_visited_count] = x;
			s_visited_y[s_visited_count] = y;
			s_visited_count += 1;
		}
	}
	stdout.write("Part 1: ");
	stdout.writeln(s_visited_count);
}

ui8 SimulateGame(ref<ui8> hashBuffer) {
	i64 x = s_start_x;
	i64 y = s_start_y;
	i8 x_dir = 0;
	i8 y_dir = -1;
	loop end, 0..6000 {
		i64 x_next = x + x_dir;
		i64 y_next = y + y_dir;
		bool turned = false;
		if (x_next < 0) | (x_next >= s_width) {
			return 0;
		} else if (y_next < 0) | (y_next >= s_height) {
			return 0;
		}
		ui32 hash = Hash(x_next, y_next);
		ui8 hasPos = hashBuffer[hash];
		if hasPos == 1 {
			if y_dir == -1 {
				y_dir = 0;
				x_dir = 1;
			} else if x_dir == 1 {
				x_dir = 0;
				y_dir = 1;
			} else if y_dir = 1 {
				y_dir = 0;
				x_dir = -1;
			} else {
				x_dir = 0;
				y_dir = -1;
			}
			turned = true;
		}
		if turned {
			skip;
		}
		x = x_next;
		y = y_next;
	}
	return 1;
}

void Part2(ref<ui8> hashBuffer) {
	ui64 sum = 0;

	loop i, 1..s_visited_count {
		ui64 x = s_visited_x[i];
		ui64 y = s_visited_y[i];
		ui32 index = Hash(x, y);
		hashBuffer[index] = 1;
		ui8 result = SimulateGame(hashBuffer);
		if result == 1 {
			sum += 1;
		}
		hashBuffer[index] = 0;
	}

	stdout.write("Part 2: ");
	stdout.writeln(sum);
}

ui8 main(array<ref<ui8> > argv) {
	i64 fd = SYS_OPEN(argv[1], 0, 0);
	if (fd < 0) {
		stdout.writeln("Could not open file");
		return -1;
	}
	ui64 size = SYS_READ(fd, \s_buffer, 20000);
	if (size == 0) {
		stdout.writeln("Could not read from file");
		return -1;
	}
	ref<ui8> hashBuffer = Setup(size);
	Part1(hashBuffer);
	Part2(hashBuffer);
	dealloc(hashBuffer, 2147483647);
	return 0;
}
